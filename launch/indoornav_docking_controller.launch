<?xml version="1.0"?>
<!--
Software License Agreement (prorietary)

\file      controller.launch
\authors   JosÃ© Mastrangelo <jmastrangelo@clearpathrobotics.com>
\copyright Copyright (c) 2022, Clearpath Robotics, Inc., All rights reserved.

Redistribution and use in source and binary forms, with or without modification, is not permitted without the
express permission of Clearpath Robotics.
-->

<launch>
  <!-- Don't launch this file in a namespace unless the robot controller is being launched in the same namespace.
  Also, launching in a namespace is still untested and might not work - but launching in a different namespace than the
  robot controller will definitely not work -->

  <!-- show source node in log messages -->
  <!-- <env name="ROSCONSOLE_FORMAT" value="[${severity}] [${node}] [${time}]: ${message}"/> -->

  <!-- Platform Type -->
  <arg name="platform" value="" />

  <!-- Navigation parameters path -->
  <arg name="navigation_params_dir" value="$(eval find('cpr_docking_' + arg('platform')) + '/$(arg platform)_gps_navigation/params/$(arg platform)_navigation')" />


  <!-- Enable the SICK_LMS 2D lidar (front if only one) -->
  <arg name="sick_lms" value="$(optenv JACKAL_LMS1XX_ENABLED false)" />
  <!-- Enable the rear SICK_LMS 2D lidar -->
  <arg name="rear_sick_lms" value="$(optenv JACKAL_LMS1XX_SECONDARY_ENABLED false)" />

  <!-- Enable the Hokuyo 2D lidar (front if only one) -->
  <arg name="hokuyo" value="$(optenv JACKAL_UST10_ENABLED true)" />
  <!-- Enable the rear Hokuyo 2D lidar -->
  <arg name="rear_hokuyo" value="$(optenv JACKAL_UST10_SECONDARY_ENABLED true)" />

  <!-- Run planning and control? -->
  <arg name="enable_control" default="true" />

  <!-- Are RTK correction being used/received? -->
  <arg name="enable_rtk" default="false" />

  <!-- Enable safety monitor -->
  <arg name="enable_safety_monitor" value="true" />

  <!-- Run continuous planner -->
  <arg name="enable_continuous_planner" value="false" />

  <!-- Run path smoother -->
  <arg name="enable_path_smoother" value="false" />

  <!-- Enable delay compensation -->
  <arg name="enable_delay_compensation" value="false" />

  <!-- Enable negative obstacle detection -->
  <arg name="enable_negative_obstacle_detection" value="false" />

  <arg name="one_laser" value="$(eval (arg('sick_lms') or arg('hokuyo')) and not (arg('rear_sick_lms') or arg('rear_hokuyo')))" />
  <arg name="two_laser" value="$(eval (arg('sick_lms') or arg('hokuyo')) and (arg('rear_sick_lms') or arg('rear_hokuyo')))" />

  <!-- PathTracker -->
  <group if="$(arg enable_control)">

    <node pkg="mbf_costmap_nav" type="mbf_costmap_nav" respawn="false" name="move_base_flex" output="screen">
      <!-- Load Controllers -->
      <rosparam file="$(arg navigation_params_dir)/mbf_controllers.yaml" command="load" />
      <!-- load general MBF parameters -->
      <rosparam file="$(arg navigation_params_dir)/mbf_general_detection.yaml" command="load" /> <!-- obstacle detection mode -->
      <!-- Load SBPL Motion Primitives -->
      <param name="SBPLLatticeMBFPlanner/motion_primitive_directory" value="$(arg navigation_params_dir)/motion_primitives/" />
      <rosparam file="$(arg navigation_params_dir)/sbpl.yaml" command="load" subst_value="true" />
      <!-- Load MPC parameters -->
      <rosparam ns="PathTracker" file="$(arg navigation_params_dir)/cpr_pathtracker.yaml" command="load" subst_value="true" />
      <!-- Load footprint sets -->
      <rosparam file="$(arg navigation_params_dir)/mbf_footprints_detection.yaml" command="load" subst_value="true" />
      <!-- Load Mission Server parameters -->
      <rosparam ns="missionplan" file="$(arg navigation_params_dir)/mission_server_common.yaml" command="load" />
      <!-- Load Planners -->
      <rosparam file="$(arg navigation_params_dir)/mbf_planners.yaml" command="load" />
      <!-- Load Recoveries -->
      <rosparam file="$(arg navigation_params_dir)/mbf_recovery.yaml" command="load" />
      
      <!-- Load Costmap parameters -->
      <rosparam ns="global_costmap" file="$(arg navigation_params_dir)/mbf_costmap_common.yaml" command="load" subst_value="true"  />
      <rosparam ns="local_costmap" file="$(arg navigation_params_dir)/mbf_costmap_common.yaml" command="load" subst_value="true" />
      <!-- No lidar, One laser -->
      <rosparam if="$(arg one_laser)" file="$(arg navigation_params_dir)/mbf_costmap_one_laser.yaml" command="load" />
      <!-- No lidar, Two lasers -->
      <rosparam if="$(arg two_laser)" file="$(arg navigation_params_dir)/mbf_costmap_two_lasers.yaml" command="load" />
      <!-- No detection sensors -->
      <rosparam unless="$(eval arg('one_laser') or arg('two_laser') or arg('one_lidar') or arg('two_lidar'))" file="$(arg navigation_params_dir)/mbf_costmap_none.yaml" command="load" />

      <!-- Load detection sensors costmap params -->
      <rosparam if="$(arg one_laser)" ns="global_costmap" file="$(arg navigation_params_dir)/obstacle_layer_sources/laser.yaml" command="load" subst_value="true" />
      <rosparam if="$(arg one_laser)" ns="local_costmap"  file="$(arg navigation_params_dir)/obstacle_layer_sources/laser.yaml" command="load" subst_value="true" />
      <rosparam if="$(arg two_laser)" ns="global_costmap" file="$(arg navigation_params_dir)/obstacle_layer_sources/two_lasers.yaml" command="load" subst_value="true" />
      <rosparam if="$(arg two_laser)" ns="local_costmap" file="$(arg navigation_params_dir)/obstacle_layer_sources/two_lasers.yaml" command="load" subst_value="true" />

      <!-- Continuous Planner overrides -->
      <rosparam if="$(arg enable_continuous_planner)" ns="missionplan" file="$(arg navigation_params_dir)/continuous_planner.yaml" command="load" subst_value="true" />
      <!-- Delay Compensation overrides -->
      <rosparam if="$(arg enable_delay_compensation)" ns="PathTracker" file="$(arg navigation_params_dir)/delay_compensation.yaml" command="load" subst_value="true" />

      <remap from="odom" to="/odometry/filtered" />
    </node>
  </group>

  <!-- Safety Monitor -->
  <group if="$(arg enable_safety_monitor)">
    <node name="docking_safety_monitor" pkg="cpr_gps_safety" type="safety_monitor.py" output="screen">
      <rosparam file="$(arg navigation_params_dir)/safety_monitor.yaml" command="load" />
      <param name="lidar_enable"             value="false" />
      <param name="robot_name"               value="$(arg platform)" />
      <param name="negative_obstacle_enable" value="$(arg enable_negative_obstacle_detection)" />
      <remap from="/input_PCL" to="/velodyne_points" />
    </node>
  </group>

</launch>
