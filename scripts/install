#!/usr/bin/env python3
"""
This script does two things;
1- Augment the ros systemd job with additional launch files to launch the Microstrain IMU, battery status
   publisher, and ROS1 --> ROS2 bridge to allow control of the Jackal from ROS2
2- Create the cpr-indoornav systemd job, which handles starting the autonomy software on the backpack PC

To give the backpack PC time to boot we allow up top 120s before the job times out on startup.
"""

import argparse
import getpass
import os
import robot_upstart
import sys

from catkin.find_in_workspaces import find_in_workspaces


def install_indoornav_job(platform):
    jobname = 'cpr-indoornav'

    pkg_name = 'cpr_indoornav_{0}'.format(platform)
    launch_files = [
        '{0}_indoornav.launch'.format(platform)
    ]

    j = robot_upstart.Job(name=jobname, workspace_setup=os.environ['ROBOT_SETUP'])
    j.symlink = True
    j.roslaunch_wait = True

    for lf in launch_files:
        j.add(package=pkg_name, filename='launch/{0}'.format(lf))

    j.install()

    os.system("sudo sed -i '/After/c After=ros.service' /lib/systemd/system/%s.service" % jobname)
    os.system("sudo sed -i '/After/a PartOf=ros.service' /lib/systemd/system/%s.service" % jobname)
    os.system("sudo sed -i '/^\[Service\]/a TimeoutStartSec=120' /lib/systemd/system/%s.service" % jobname)
    os.system("sudo sed -i '/^\[Service\]/a ExecStartPre=/usr/sbin/cpr-indoornav-wait' /lib/systemd/system/%s.service" % jobname)

    os.system('''sudo bash -c "cat > /usr/sbin/cpr-indoornav-wait" << 'EOL'
#!/bin/bash

while true;
do
  # SSH credentials are assumed to already be configured, as otherwise we cannot start the remote ROS nodes
  # note that we must run this as the administrator user, not as root!
  echo "[ROS ] Waiting for {backpack_ip} to come up..."
  REMOTE_HOSTNAME=$(sudo -u {local_user} ssh {remote_user}@{backpack_ip} -oHostKeyAlgorithms='ssh-rsa' 'hostname')
  if [ -z "$REMOTE_HOSTNAME" ];
  then
    # wait 5s and try again
    echo -n "."
    sleep 5
  else
    echo "[ROS ] Successfully logged into $REMOTE_HOSTNAME as {remote_user}; can now launch indoornav"
    break
  fi
done
EOL'''.format(
      backpack_ip=backpack_ip,
      remote_user=remote_user,
      local_user=local_user
    ))
    os.system("sudo chmod +x /usr/sbin/cpr-indoornav-wait")

def upgrade_ros_job(platform):
    jobname = 'ros'

    pkg_name = 'cpr_indoornav_{0}'.format(platform)
    launch_files = [
        'power_monitor.launch',
        'indoornav_imu.launch',
        'indoornav_wireless.launch',
        'bridge_relay.launch'
    ]

    j = robot_upstart.Job(name=jobname, workspace_setup=os.environ['ROBOT_SETUP'])
    j.generate_system_files = False  # --augment
    j.symlink = True                 # --symlink

    for lf in launch_files:
        j.add(package=pkg_name, filename='launch/{0}'.format(lf))

    j.install()

def install_docking_job(platform):
    jobname = 'docking'

    pkg_name = 'cpr_indoornav_{0}'.format(platform)
    launch_files = [
        '{0}_docking.launch'.format(platform)
    ]

    j = robot_upstart.Job(name=jobname, workspace_setup=os.environ['ROBOT_SETUP'])
    j.symlink = True
    j.roslaunch_wait = True

    for lf in launch_files:
        j.add(package=pkg_name, filename='launch/{0}'.format(lf))

    j.install()

    os.system("sudo sed -i '/After/c After=cpr-indoornav.service' /lib/systemd/system/%s.service" % jobname)
    os.system("sudo sed -i '/After/a PartOf=cpr-indoornav.service' /lib/systemd/system/%s.service" % jobname)



parser = argparse.ArgumentParser()
parser.add_argument('-a','--ip-address', metavar='IP_ADDR', type=str, action='store', dest='ip_address', help='IP address of the IndoorNav backpack. Default: 10.252.252.1', default='10.252.252.1')
parser.add_argument('-u','--username', metavar='USER', type=str, action='store', dest='username', help='Login name for the IndoorNav backpack. Default: administrator', default='administrator')
parser.add_argument('-d','--docking', metavar='USER', type=bool, action='store', dest='docking', help='Enable/Disable docking for indoornav. Default: False', default=False)
args = parser.parse_args()

if getpass.getuser() == 'root':
    print("ERROR: This script cannot be run as root")
    sys.exit(1)

backpack_ip = args.ip_address
remote_user = args.username
local_user = getpass.getuser()

install_indoornav_job('jackal')
if args.docking:
    install_docking_job('jackal')
upgrade_ros_job('jackal')
